
(in-package :stumpwm)


(setf *home-dir*      (make-pathname :directory (getenv "XDG_CONFIG_HOME"))
      *stump-dir*     (merge-pathnames (make-pathname :directory '(:relative "stumpwm")) *home-dir*)
      *data-dir*      (merge-pathnames (make-pathname :directory '(:relative "storage")) *stump-dir*)
      *load-dir*      (merge-pathnames (make-pathname :directory '(:relative "lisp")) *stump-dir*)
      *undo-data-dir* (make-pathname :directory "/dev/shm/.1009")
      *debug-file*    (merge-pathnames (make-pathname :name "debug") *stump-dir*)
      *scratchpad-group-name* ".scratch")


(setf *startup-message*
      "Forget Crackers. Polly needs some CRACK! Give Polly some CRACK!")

(setf *run-or-raise-all-groups* t)

(defvar *terminal* "urxvt"
  "Command to start a terminal.")

(defvar *terminal-smallfont* "urxvt -fn xft:Pragmata:size=7"
  "Command to start a terminal with small font.")



(defun color (key)
  "erosion colorscheme generated by polychrome"
  (let ((colors '(:foreground   #xBEA492
                  :background-0 #x181512
                  :background-1 #x100E0C
                  :background-2 #x231F1A
                  :background-3 #x695C4F
                  :black        #x352C26
                  :red          #x9B5E3B
                  :green        #xD2C984
                  :yellow       #xCAC286
                  :blue         #x626B6F
                  :magenta      #x6E6774
                  :cyan         #x374A4D
                  :white        #x564333
                  :black-1      #x584231
                  :red-1        #xB16E43
                  :green-1      #xCDD26A
                  :yellow-1     #xFFFFB4
                  :blue-1       #x5E6F78
                  :magenta-1    #x756D7E
                  :cyan-1       #x425052
                  :white-1      #xAA8D50)))
    (getf colors key)))



(set-font "-misc-fixed-medium-r-semicondensed--12-110-75-75-c-60-iso8859-1")

(set-fg-color     (color :foreground))
(set-bg-color     (color :background-0))
(set-border-color (color :background-2))

(setf *message-window-padding* 10
      *message-window-gravity* :bottom-right
      *input-window-gravity* :bottom-right)

; (setf *mode-line-foreground-color* "oldlace"
;       *mode-line-background-color* "dimgray"
;       *mode-line-border-color*     "oldlace")

(setf *maxsize-border-width*   0
      *transient-border-width* 2
      *normal-border-width*    1
      *window-border-style*    :thin)

(set-focus-color   (color :red))
(set-unfocus-color (color :background-2))
(set-win-bg-color  (color :background-0))


(set-prefix-key (kbd "s-,"))

(setq *mouse-focus-policy* :click)


(defcommand run-shell-command (cmd &optional collect-output-p)
            ((:shell "execute: "))
            "Run the specified shell command. If @var{collect-output-p} is @code{T}
            then run the command synchronously and collect the output."
            (if collect-output-p
              (run-prog-collect-output *shell-program* "-c" cmd)
              (run-prog *shell-program* :args (list "-c" cmd) :wait nil)))

(setf *shell-program* (getenv "SHELL"))
(defcommand-alias exec run-shell-command)

(run-shell-command "xsetroot -cursor_name left_ptr")
; (run-shell-command "feh --bg-tile ~/.wall.jpg")
; (run-shell-command "killall dzen.sh")
;(run-shell-command (format nil "~A/stumpwm/dzen/dzen.sh &" (getenv "XDG_CONFIG_HOME")))
; (run-shell-command "bar.sh")


(defmacro make-groups-bg (&rest names)
  (let ((ns (mapcar #'(lambda (n) (concatenate 'string "gnewbg " n)) names)))
    `(run-commands ,@ns)))

(clear-window-placement-rules)
(setf (group-name
        (first
          (screen-groups (current-screen)))) "main")
(make-groups-bg "web")
(if (probe-file (data-dir-file "desktop.lisp"))
  (restore-from-file (data-dir-file "desktop.lisp")))
(cond ((string-equal (group-name (current-group)) *scratchpad-group-name*) (gother)))


(setq *useless-gaps-size* 1)
(setq *useless-gaps-on* t)

(load (merge-pathnames (make-pathname :name "gaps" :type "lisp"
                                      :directory '(:relative "vendor")) *load-dir*))

(loop for file in '("commands"
                    "functions"
                    "hooks"
                    "keymap"
                    "remember"
                    "websearch"
                    "window_rules")
      do (load (merge-pathnames (make-pathname :name file :type "lisp"
                                               :directory '(:relative "my")) *load-dir*)))
