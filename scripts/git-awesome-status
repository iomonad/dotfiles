#!/usr/bin/env perl
use strict;
use warnings;

my @order = (
    'Untracked files',
    'Working tree',
    'Index',
    'Local branches',
    'Feature branches',
);

my $branches;
sub branches {
    unless ($branches) {
        $branches = [ map { s/\s+$//; $_ } split /\n/, `git branch -l --color` ];
    }
    return @$branches;
}

my %code_for = (
    'Untracked files' => sub {
        my $untracked_files = `git ls-files -z --exclude-standard --directory --others --full-name`;
        return {
            output => [map { " $_\n" } split "\0", $untracked_files],
        };
    },
    'Working tree' => sub {
        return {
            output => [`git diff --color --stat`],
        };
    },
    'Index' => sub {
        return {
            output => [`git diff --color --stat --cached`],
        };
    },
    'Local branches' => sub {
        my @output;
        for my $colored_name (branches) {
            my $plain_name = $colored_name;
            $plain_name =~ s/^[\s*]+//;
            # strip ansi colors, ew
            # http://stackoverflow.com/questions/7394889/best-way-to-remove-ansi-color-escapes-in-unix
            $plain_name =~ s/\e\[[\d;]*[a-zA-Z]//g;

            next if $plain_name eq '(no branch)';

            my $status = `git rev-list $plain_name\@{u}..$plain_name 2>&1`;
            if ($status =~ /No upstream branch found/ || $status =~ /unknown revision/) {
                push @output, " $colored_name: No upstream\n";
                next;
            }

            my $diff;
            if (my $lines = $status =~ tr/\n/\n/) {
                $diff .= "\e[32m+$lines\e[m";
            }

            my $reverse = `git rev-list $plain_name..$plain_name\@{u} 2>&1`;
            if (my $reverse_lines = $reverse =~ tr/\n/\n/) {
                $diff .= "\e[31m-$reverse_lines\e[m";
            }

            push @output, " $colored_name: $diff\n"
                if $diff;
        }

        return {
            output => \@output,
        };
    },
    'Feature branches' => sub {
        chomp(my $integration = `git config awesome-status.integration`);
        if (!$integration) {
            warn "The feature branches status expects the integration branch to be configured. Please set the integration branch for this project like:\n    git config --add awesome-status.integration release-2.1.0\n";
            return;
        }

        if (`git rev-parse $integration 2>&1` =~ /unknown revision/) {
            warn "Your configured integration branch ($integration) does not exist. Please create it or change the integration branch for this project like:\n    git config --replace-all awesome-status.integration release-2.1.1\n";
            return;
        }

        my @output;
        for my $colored_name (branches) {
            my $plain_name = $colored_name;
            $plain_name =~ s/^[\s*]+//;
            # strip ansi colors, ew
            # http://stackoverflow.com/questions/7394889/best-way-to-remove-ansi-color-escapes-in-unix
            $plain_name =~ s/\e\[[\d;]*[a-zA-Z]//g;

            next if $plain_name eq '(no branch)';

            my $status = `git rev-list $integration..$plain_name 2>&1`;

            my $diff;
            if (my $lines = $status =~ tr/\n/\n/) {
                $diff .= "\e[32m+$lines\e[m";
            }

            push @output, " $colored_name: $diff\n"
                if $diff;
        }

        return {
            component => "Feature branches (merging into $integration)",
            output    => \@output,
        };
    },
);

my $printed_block = 0;
for my $component (@order) {
    my $results = $code_for{$component}->();
    next unless $results && @{ $results->{output} };

    $results->{component} ||= $component;

    print "\n" if $printed_block;
    $printed_block++;

    print "$results->{component}:\n";
    print @{ $results->{output} };
}
